
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.SystemLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  ipAddress: 'ipAddress',
  device: 'device',
  action: 'action',
  method: 'method',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  user_id: 'user_id',
  fullName: 'fullName',
  username: 'username',
  birthDate: 'birthDate',
  email: 'email',
  password: 'password',
  gender: 'gender',
  role: 'role',
  verifiedAt: 'verifiedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JournalScalarFieldEnum = {
  journal_id: 'journal_id',
  userId: 'userId',
  title: 'title',
  content: 'content',
  mood: 'mood',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuoteScalarFieldEnum = {
  quote_id: 'quote_id',
  category: 'category',
  text: 'text',
  author: 'author',
  clickCount: 'clickCount',
  createdAt: 'createdAt'
};

exports.Prisma.QuoteLogScalarFieldEnum = {
  quote_log_id: 'quote_log_id',
  userId: 'userId',
  quoteId: 'quoteId',
  action: 'action',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.SystemLogOrderByRelevanceFieldEnum = {
  ipAddress: 'ipAddress',
  device: 'device',
  action: 'action',
  method: 'method',
  description: 'description'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  fullName: 'fullName',
  username: 'username',
  email: 'email',
  password: 'password'
};

exports.Prisma.JournalOrderByRelevanceFieldEnum = {
  title: 'title',
  content: 'content'
};

exports.Prisma.QuoteOrderByRelevanceFieldEnum = {
  text: 'text',
  author: 'author'
};
exports.Gender = exports.$Enums.Gender = {
  male: 'male',
  female: 'female'
};

exports.Role = exports.$Enums.Role = {
  admin: 'admin',
  user: 'user'
};

exports.Mood = exports.$Enums.Mood = {
  happy: 'happy',
  sad: 'sad',
  neutral: 'neutral',
  angry: 'angry',
  motivated: 'motivated'
};

exports.QuoteCategory = exports.$Enums.QuoteCategory = {
  sad: 'sad',
  happy: 'happy',
  motivation: 'motivation'
};

exports.QuoteAction = exports.$Enums.QuoteAction = {
  click: 'click',
  like: 'like'
};

exports.Prisma.ModelName = {
  SystemLog: 'SystemLog',
  User: 'User',
  Journal: 'Journal',
  Quote: 'Quote',
  QuoteLog: 'QuoteLog'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\dev\\web\\humic_journaling\\journaling-be\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\dev\\web\\humic_journaling\\journaling-be\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mysql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  // output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel SystemLog {\n  id          Int      @id @default(autoincrement())\n  user        User?    @relation(fields: [userId], references: [user_id])\n  userId      Int?\n  ipAddress   String\n  device      String\n  action      String\n  method      String\n  description String\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n}\n\nmodel User {\n  user_id    Int         @id @default(autoincrement())\n  fullName   String\n  username   String      @unique\n  birthDate  DateTime\n  email      String      @unique\n  password   String\n  gender     Gender?\n  journals   Journal[]\n  quoteLogs  QuoteLog[]\n  logins     SystemLog[]\n  role       Role        @default(user)\n  verifiedAt DateTime?\n  createdAt  DateTime    @default(now())\n  updatedAt  DateTime    @updatedAt\n}\n\nmodel Journal {\n  journal_id Int      @id @default(autoincrement())\n  user       User     @relation(fields: [userId], references: [user_id])\n  userId     Int\n  title      String?\n  content    String\n  mood       Mood\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n}\n\nmodel Quote {\n  quote_id   Int           @id @default(autoincrement())\n  category   QuoteCategory\n  text       String\n  author     String?\n  clickCount Int           @default(0)\n  quoteLogs  QuoteLog[]\n  createdAt  DateTime      @default(now())\n}\n\nmodel QuoteLog {\n  quote_log_id Int         @id @default(autoincrement())\n  user         User        @relation(fields: [userId], references: [user_id])\n  userId       Int\n  quote        Quote       @relation(fields: [quoteId], references: [quote_id])\n  quoteId      Int\n  action       QuoteAction\n  createdAt    DateTime    @default(now())\n}\n\nenum Gender {\n  male\n  female\n}\n\nenum Role {\n  admin\n  user\n}\n\nenum Mood {\n  happy\n  sad\n  neutral\n  angry\n  motivated\n}\n\nenum QuoteCategory {\n  sad\n  happy\n  motivation\n}\n\nenum QuoteAction {\n  click\n  like\n}\n",
  "inlineSchemaHash": "9a614b84ddf686aae3249546fdefb781ff96779b3ca1b8fb0672ac7eb336a2bf",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"SystemLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SystemLogToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"device\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"method\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"User\":{\"fields\":[{\"name\":\"user_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"fullName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"birthDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gender\",\"kind\":\"enum\",\"type\":\"Gender\"},{\"name\":\"journals\",\"kind\":\"object\",\"type\":\"Journal\",\"relationName\":\"JournalToUser\"},{\"name\":\"quoteLogs\",\"kind\":\"object\",\"type\":\"QuoteLog\",\"relationName\":\"QuoteLogToUser\"},{\"name\":\"logins\",\"kind\":\"object\",\"type\":\"SystemLog\",\"relationName\":\"SystemLogToUser\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"verifiedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Journal\":{\"fields\":[{\"name\":\"journal_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"JournalToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mood\",\"kind\":\"enum\",\"type\":\"Mood\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Quote\":{\"fields\":[{\"name\":\"quote_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"category\",\"kind\":\"enum\",\"type\":\"QuoteCategory\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"author\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clickCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"quoteLogs\",\"kind\":\"object\",\"type\":\"QuoteLog\",\"relationName\":\"QuoteToQuoteLog\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"QuoteLog\":{\"fields\":[{\"name\":\"quote_log_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"QuoteLogToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"quote\",\"kind\":\"object\",\"type\":\"Quote\",\"relationName\":\"QuoteToQuoteLog\"},{\"name\":\"quoteId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"action\",\"kind\":\"enum\",\"type\":\"QuoteAction\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

